{"ast":null,"code":"import _classCallCheck from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateAngle(particle, delta) {\n  var _a, _b;\n  var rotate = particle.rotate,\n    rotateOptions = particle.options.rotate;\n  if (!rotate || !rotateOptions) {\n    return;\n  }\n  var rotateAnimation = rotateOptions.animation,\n    speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n    max = 2 * Math.PI,\n    decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n  if (!rotateAnimation.enable) {\n    return;\n  }\n  switch (rotate.status) {\n    case \"increasing\":\n      rotate.value += speed;\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n      break;\n    case \"decreasing\":\n    default:\n      rotate.value -= speed;\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n      break;\n  }\n  if (rotate.velocity && decay !== 1) {\n    rotate.velocity *= decay;\n  }\n}\nexport var RotateUpdater = /*#__PURE__*/function () {\n  function RotateUpdater(container) {\n    _classCallCheck(this, RotateUpdater);\n    this.container = container;\n  }\n  _createClass(RotateUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var rotateOptions = particle.options.rotate;\n      if (!rotateOptions) {\n        return;\n      }\n      particle.rotate = {\n        enable: rotateOptions.animation.enable,\n        value: getRangeValue(rotateOptions.value) * Math.PI / 180\n      };\n      particle.pathRotation = rotateOptions.path;\n      var rotateDirection = rotateOptions.direction;\n      if (rotateDirection === \"random\") {\n        var index = Math.floor(getRandom() * 2);\n        rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n      }\n      switch (rotateDirection) {\n        case \"counter-clockwise\":\n        case \"counterClockwise\":\n          particle.rotate.status = \"decreasing\";\n          break;\n        case \"clockwise\":\n          particle.rotate.status = \"increasing\";\n          break;\n      }\n      var rotateAnimation = rotateOptions.animation;\n      if (rotateAnimation.enable) {\n        particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n        particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n        if (!rotateAnimation.sync) {\n          particle.rotate.velocity *= getRandom();\n        }\n      }\n      particle.rotation = particle.rotate.value;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var rotate = particle.options.rotate;\n      if (!rotate) {\n        return false;\n      }\n      return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.rotate) {\n        options.rotate = new Rotate();\n      }\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.rotate.load(source === null || source === void 0 ? void 0 : source.rotate);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      var _a, _b;\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      updateAngle(particle, delta);\n      particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n    }\n  }]);\n  return RotateUpdater;\n}();","map":{"version":3,"names":["getRandom","getRangeValue","Rotate","updateAngle","particle","delta","_a","_b","rotate","rotateOptions","options","rotateAnimation","animation","speed","velocity","factor","max","Math","PI","decay","enable","status","value","RotateUpdater","container","_classCallCheck","_createClass","key","init","pathRotation","path","rotateDirection","direction","index","floor","retina","reduceFactor","sync","rotation","isEnabled","destroyed","spawning","loadOptions","_len","arguments","length","sources","Array","_key","_i","_sources","source","load","update"],"sources":["C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/tsparticles-updater-angle/esm/RotateUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateAngle(particle, delta) {\n    var _a, _b;\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, max = 2 * Math.PI, decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source === null || source === void 0 ? void 0 : source.rotate);\n        }\n    }\n    update(particle, delta) {\n        var _a, _b;\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAngle(particle, delta);\n        particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}