{"ast":null,"code":"import _classCallCheck from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\nfunction updateRoll(particle, delta) {\n  var roll = particle.options.roll;\n  if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n    return;\n  }\n  var speed = particle.roll.speed * delta.factor,\n    max = 2 * Math.PI;\n  particle.roll.angle += speed;\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\nexport var RollUpdater = /*#__PURE__*/function () {\n  function RollUpdater() {\n    _classCallCheck(this, RollUpdater);\n  }\n  _createClass(RollUpdater, [{\n    key: \"getTransformValues\",\n    value: function getTransformValues(particle) {\n      var _a;\n      var roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll,\n        rollHorizontal = roll && roll.horizontal,\n        rollVertical = roll && roll.vertical;\n      return {\n        a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n        d: rollVertical ? Math.sin(roll.angle) : undefined\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(particle) {\n      var rollOpt = particle.options.roll;\n      if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n        particle.roll = {\n          enable: rollOpt.enable,\n          horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n          vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n          angle: getRandom() * Math.PI * 2,\n          speed: getRangeValue(rollOpt.speed) / 360\n        };\n        if (rollOpt.backColor) {\n          particle.backColor = rangeColorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          var alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n          particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n          };\n        } else if (rollOpt.darken.enable) {\n          particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value)\n          };\n        } else if (rollOpt.enlighten.enable) {\n          particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value)\n          };\n        }\n      } else {\n        particle.roll = {\n          enable: false,\n          horizontal: false,\n          vertical: false,\n          angle: 0,\n          speed: 0\n        };\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var roll = particle.options.roll;\n      return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.roll) {\n        options.roll = new Roll();\n      }\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.roll.load(source === null || source === void 0 ? void 0 : source.roll);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      updateRoll(particle, delta);\n    }\n  }]);\n  return RollUpdater;\n}();","map":{"version":3,"names":["getRandom","getRangeValue","rangeColorToHsl","Roll","updateRoll","particle","delta","roll","options","enable","speed","factor","max","Math","PI","angle","RollUpdater","_classCallCheck","_createClass","key","value","getTransformValues","_a","rollHorizontal","horizontal","rollVertical","vertical","a","cos","undefined","d","sin","init","rollOpt","mode","backColor","darken","enlighten","alterType","alter","type","isEnabled","destroyed","spawning","loadOptions","_len","arguments","length","sources","Array","_key","_i","_sources","source","load","update"],"sources":["C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/tsparticles-updater-roll/esm/RollUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor, max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nexport class RollUpdater {\n    getTransformValues(particle) {\n        var _a;\n        const roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n            particle.roll = {\n                enable: rollOpt.enable,\n                horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n                vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n                angle: getRandom() * Math.PI * 2,\n                speed: getRangeValue(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = rangeColorToHsl(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: getRangeValue(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: getRangeValue(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = {\n                enable: false,\n                horizontal: false,\n                vertical: false,\n                angle: 0,\n                speed: 0,\n            };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source === null || source === void 0 ? void 0 : source.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}