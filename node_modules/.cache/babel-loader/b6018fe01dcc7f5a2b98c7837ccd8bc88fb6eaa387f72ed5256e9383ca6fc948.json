{"ast":null,"code":"import { clamp, getDistances, getRandom } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n  var initialPosition = particle.initialPosition,\n    _getDistances = getDistances(initialPosition, particle.position),\n    dx = _getDistances.dx,\n    dy = _getDistances.dy,\n    dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy),\n    hDistance = particle.retina.maxDistance.horizontal,\n    vDistance = particle.retina.maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -getRandom();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -getRandom();\n    }\n  }\n}\nexport function spin(particle, moveSpeed) {\n  var container = particle.container;\n  if (!particle.spin) {\n    return;\n  }\n  var updateFunc = {\n    x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n    y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n  };\n  particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n  particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n  particle.spin.radius += particle.spin.acceleration;\n  var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n  if (particle.spin.radius > maxCanvasSize / 2) {\n    particle.spin.radius = maxCanvasSize / 2;\n    particle.spin.acceleration *= -1;\n  } else if (particle.spin.radius < 0) {\n    particle.spin.radius = 0;\n    particle.spin.acceleration *= -1;\n  }\n  particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n  var _a;\n  var particlesOptions = particle.options,\n    pathOptions = particlesOptions.move.path,\n    pathEnabled = pathOptions.enable;\n  if (!pathEnabled) {\n    return;\n  }\n  if (particle.lastPathTime <= particle.pathDelay) {\n    particle.lastPathTime += delta.value;\n    return;\n  }\n  var path = (_a = particle.pathGenerator) === null || _a === void 0 ? void 0 : _a.generate(particle);\n  if (path) {\n    particle.velocity.addTo(path);\n  }\n  if (pathOptions.clamp) {\n    particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n    particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n  }\n  particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n  return particle.slow.inRange ? particle.slow.factor : 1;\n}","map":{"version":3,"names":["clamp","getDistances","getRandom","applyDistance","particle","initialPosition","_getDistances","position","dx","dy","dxFixed","Math","abs","dyFixed","hDistance","retina","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","spin","moveSpeed","container","updateFunc","direction","cos","sin","center","radius","angle","acceleration","maxCanvasSize","max","canvas","size","width","height","applyPath","delta","_a","particlesOptions","options","pathOptions","move","path","pathEnabled","enable","lastPathTime","pathDelay","value","pathGenerator","generate","addTo","getProximitySpeedFactor","slow","inRange","factor"],"sources":["C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/tsparticles-move-base/esm/Utils.js"],"sourcesContent":["import { clamp, getDistances, getRandom } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), hDistance = particle.retina.maxDistance.horizontal, vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    var _a;\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = (_a = particle.pathGenerator) === null || _a === void 0 ? void 0 : _a.generate(particle);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : 1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}