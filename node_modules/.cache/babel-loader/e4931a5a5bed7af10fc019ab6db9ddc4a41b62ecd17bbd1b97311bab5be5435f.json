{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport var ImageDrawer = /*#__PURE__*/function () {\n  function ImageDrawer() {\n    _classCallCheck(this, ImageDrawer);\n    this._images = [];\n  }\n  _createClass(ImageDrawer, [{\n    key: \"addImage\",\n    value: function addImage(container, image) {\n      var containerImages = this.getImages(container);\n      containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._images = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context, particle, radius, opacity) {\n      var _a;\n      var image = particle.image,\n        element = image === null || image === void 0 ? void 0 : image.element;\n      if (!element) {\n        return;\n      }\n      var ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1,\n        pos = {\n          x: -radius,\n          y: -radius\n        };\n      context.globalAlpha = opacity;\n      context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n      context.globalAlpha = 1;\n    }\n  }, {\n    key: \"getImages\",\n    value: function getImages(container) {\n      var containerImages = this._images.find(function (t) {\n        return t.id === container.id;\n      });\n      if (!containerImages) {\n        this._images.push({\n          id: container.id,\n          images: []\n        });\n        return this.getImages(container);\n      } else {\n        return containerImages;\n      }\n    }\n  }, {\n    key: \"getSidesCount\",\n    value: function getSidesCount() {\n      return 12;\n    }\n  }, {\n    key: \"loadShape\",\n    value: function loadShape(particle) {\n      var _this = this;\n      if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n        return;\n      }\n      var container = particle.container,\n        images = this.getImages(container).images,\n        imageData = particle.shapeData,\n        image = images.find(function (t) {\n          return t.source === imageData.src;\n        });\n      if (!image) {\n        this.loadImageShape(container, imageData).then(function () {\n          _this.loadShape(particle);\n        });\n      }\n    }\n  }, {\n    key: \"particleInit\",\n    value: function particleInit(container, particle) {\n      var _this2 = this;\n      var _a;\n      if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n        return;\n      }\n      var images = this.getImages(container).images,\n        imageData = particle.shapeData,\n        color = particle.getFillColor(),\n        replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color,\n        image = images.find(function (t) {\n          return t.source === imageData.src;\n        });\n      if (!image) {\n        return;\n      }\n      if (image.loading) {\n        setTimeout(function () {\n          _this2.particleInit(container, particle);\n        });\n        return;\n      }\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _a, _b, imageRes, fill, close, imageShape;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(image.svgData && color)) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 3;\n              return replaceImageColor(image, imageData, color, particle);\n            case 3:\n              imageRes = _context.sent;\n              _context.next = 7;\n              break;\n            case 6:\n              imageRes = {\n                color: color,\n                data: image,\n                element: image.element,\n                loaded: true,\n                ratio: imageData.width / imageData.height,\n                replaceColor: replaceColor,\n                source: imageData.src\n              };\n            case 7:\n              if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n              }\n              fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                image: imageRes,\n                fill: fill,\n                close: close\n              };\n              particle.image = imageShape.image;\n              particle.fill = imageShape.fill;\n              particle.close = imageShape.close;\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }, {\n    key: \"loadImageShape\",\n    value: function () {\n      var _loadImageShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(container, imageShape) {\n        var _a, source, image, imageFunc;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              source = imageShape.src;\n              if (source) {\n                _context2.next = 3;\n                break;\n              }\n              throw new Error(\"Error tsParticles - No image.src\");\n            case 3:\n              _context2.prev = 3;\n              image = {\n                source: source,\n                type: source.substring(source.length - 3),\n                error: false,\n                loading: true\n              };\n              this.addImage(container, image);\n              imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n              _context2.next = 9;\n              return imageFunc(image);\n            case 9:\n              _context2.next = 14;\n              break;\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](3);\n              throw new Error(\"tsParticles error - \".concat(imageShape.src, \" not found\"));\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[3, 11]]);\n      }));\n      function loadImageShape(_x, _x2) {\n        return _loadImageShape.apply(this, arguments);\n      }\n      return loadImageShape;\n    }()\n  }]);\n  return ImageDrawer;\n}();","map":{"version":3,"names":["downloadSvgImage","loadImage","replaceImageColor","ImageDrawer","_classCallCheck","_images","_createClass","key","value","addImage","container","image","containerImages","getImages","images","push","destroy","draw","context","particle","radius","opacity","_a","element","ratio","pos","x","y","globalAlpha","drawImage","find","t","id","getSidesCount","loadShape","_this","shape","imageData","shapeData","source","src","loadImageShape","then","particleInit","_this2","color","getFillColor","replaceColor","replace_color","loading","setTimeout","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_b","imageRes","fill","close","imageShape","wrap","_callee$","_context","prev","next","svgData","sent","data","loaded","width","height","stop","_loadImageShape","_callee2","imageFunc","_callee2$","_context2","Error","type","substring","length","error","t0","concat","_x","_x2","apply","arguments"],"sources":["C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/tsparticles-shape-image/esm/ImageDrawer.js"],"sourcesContent":["import { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor() {\n        this._images = [];\n    }\n    addImage(container, image) {\n        const containerImages = this.getImages(container);\n        containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n    destroy() {\n        this._images = [];\n    }\n    draw(context, particle, radius, opacity) {\n        var _a;\n        const image = particle.image, element = image === null || image === void 0 ? void 0 : image.element;\n        if (!element) {\n            return;\n        }\n        const ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1, pos = {\n            x: -radius,\n            y: -radius,\n        };\n        context.globalAlpha = opacity;\n        context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        context.globalAlpha = 1;\n    }\n    getImages(container) {\n        const containerImages = this._images.find((t) => t.id === container.id);\n        if (!containerImages) {\n            this._images.push({\n                id: container.id,\n                images: [],\n            });\n            return this.getImages(container);\n        }\n        else {\n            return containerImages;\n        }\n    }\n    getSidesCount() {\n        return 12;\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const container = particle.container, images = this.getImages(container).images, imageData = particle.shapeData, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(container, imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        var _a;\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const images = this.getImages(container).images, imageData = particle.shapeData, color = particle.getFillColor(), replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            var _a, _b;\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    loaded: true,\n                    ratio: imageData.width / imageData.height,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n    async loadImageShape(container, imageShape) {\n        var _a;\n        const source = imageShape.src;\n        if (!source) {\n            throw new Error(\"Error tsParticles - No image.src\");\n        }\n        try {\n            const image = {\n                source: source,\n                type: source.substring(source.length - 3),\n                error: false,\n                loading: true,\n            };\n            this.addImage(container, image);\n            const imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch (_b) {\n            throw new Error(`tsParticles error - ${imageShape.src} not found`);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}