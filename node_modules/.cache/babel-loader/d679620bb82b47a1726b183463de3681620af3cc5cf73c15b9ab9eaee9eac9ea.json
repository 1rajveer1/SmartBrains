{"ast":null,"code":"import _classCallCheck from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport var LifeUpdater = /*#__PURE__*/function () {\n  function LifeUpdater(container) {\n    _classCallCheck(this, LifeUpdater);\n    this.container = container;\n  }\n  _createClass(LifeUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var container = this.container,\n        particlesOptions = particle.options,\n        lifeOptions = particlesOptions.life;\n      if (!lifeOptions) {\n        return;\n      }\n      particle.life = {\n        delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: lifeOptions.count\n      };\n      if (particle.life.duration <= 0) {\n        particle.life.duration = -1;\n      }\n      if (particle.life.count <= 0) {\n        particle.life.count = -1;\n      }\n      if (particle.life) {\n        particle.spawning = particle.life.delay > 0;\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.life) {\n        options.life = new Life();\n      }\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.life.load(source === null || source === void 0 ? void 0 : source.life);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle) || !particle.life) {\n        return;\n      }\n      var life = particle.life;\n      var justSpawned = false;\n      if (particle.spawning) {\n        life.delayTime += delta.value;\n        if (life.delayTime >= particle.life.delay) {\n          justSpawned = true;\n          particle.spawning = false;\n          life.delayTime = 0;\n          life.time = 0;\n        } else {\n          return;\n        }\n      }\n      if (life.duration === -1) {\n        return;\n      }\n      if (particle.spawning) {\n        return;\n      }\n      if (justSpawned) {\n        life.time = 0;\n      } else {\n        life.time += delta.value;\n      }\n      if (life.time < life.duration) {\n        return;\n      }\n      life.time = 0;\n      if (particle.life.count > 0) {\n        particle.life.count--;\n      }\n      if (particle.life.count === 0) {\n        particle.destroy();\n        return;\n      }\n      var canvasSize = this.container.canvas.size,\n        widthRange = setRangeValue(0, canvasSize.width),\n        heightRange = setRangeValue(0, canvasSize.width);\n      particle.position.x = randomInRange(widthRange);\n      particle.position.y = randomInRange(heightRange);\n      particle.spawning = true;\n      life.delayTime = 0;\n      life.time = 0;\n      particle.reset();\n      var lifeOptions = particle.options.life;\n      if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n        life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n      }\n    }\n  }]);\n  return LifeUpdater;\n}();","map":{"version":3,"names":["getRandom","getRangeValue","randomInRange","setRangeValue","Life","LifeUpdater","container","_classCallCheck","_createClass","key","value","init","particle","particlesOptions","options","lifeOptions","life","delay","retina","reduceFactor","sync","delayTime","duration","time","count","spawning","isEnabled","destroyed","loadOptions","_len","arguments","length","sources","Array","_key","_i","_sources","source","load","update","delta","justSpawned","destroy","canvasSize","canvas","size","widthRange","width","heightRange","position","x","y","reset"],"sources":["C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/tsparticles-updater-life/esm/LifeUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source === null || source === void 0 ? void 0 : source.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,aAAa,EAAEC,aAAa,EAAEC,aAAa,QAAQ,oBAAoB;AAC3F,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,WAAaC,WAAW;EACpB,SAAAA,YAAYC,SAAS,EAAE;IAAAC,eAAA,OAAAF,WAAA;IACnB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EAACE,YAAA,CAAAH,WAAA;IAAAI,GAAA;IAAAC,KAAA,EACD,SAAAC,KAAKC,QAAQ,EAAE;MACX,IAAMN,SAAS,GAAG,IAAI,CAACA,SAAS;QAAEO,gBAAgB,GAAGD,QAAQ,CAACE,OAAO;QAAEC,WAAW,GAAGF,gBAAgB,CAACG,IAAI;MAC1G,IAAI,CAACD,WAAW,EAAE;QACd;MACJ;MACAH,QAAQ,CAACI,IAAI,GAAG;QACZC,KAAK,EAAEX,SAAS,CAACY,MAAM,CAACC,YAAY,GAC5BlB,aAAa,CAACc,WAAW,CAACE,KAAK,CAACP,KAAK,CAAC,IAAIK,WAAW,CAACE,KAAK,CAACG,IAAI,GAAG,CAAC,GAAGpB,SAAS,EAAE,CAAC,GACnFM,SAAS,CAACY,MAAM,CAACC,YAAY,GAC7B,IAAI,GACN,CAAC;QACPE,SAAS,EAAE,CAAC;QACZC,QAAQ,EAAEhB,SAAS,CAACY,MAAM,CAACC,YAAY,GAC/BlB,aAAa,CAACc,WAAW,CAACO,QAAQ,CAACZ,KAAK,CAAC,IAAIK,WAAW,CAACO,QAAQ,CAACF,IAAI,GAAG,CAAC,GAAGpB,SAAS,EAAE,CAAC,GACzFM,SAAS,CAACY,MAAM,CAACC,YAAY,GAC7B,IAAI,GACN,CAAC;QACPI,IAAI,EAAE,CAAC;QACPC,KAAK,EAAET,WAAW,CAACS;MACvB,CAAC;MACD,IAAIZ,QAAQ,CAACI,IAAI,CAACM,QAAQ,IAAI,CAAC,EAAE;QAC7BV,QAAQ,CAACI,IAAI,CAACM,QAAQ,GAAG,CAAC,CAAC;MAC/B;MACA,IAAIV,QAAQ,CAACI,IAAI,CAACQ,KAAK,IAAI,CAAC,EAAE;QAC1BZ,QAAQ,CAACI,IAAI,CAACQ,KAAK,GAAG,CAAC,CAAC;MAC5B;MACA,IAAIZ,QAAQ,CAACI,IAAI,EAAE;QACfJ,QAAQ,CAACa,QAAQ,GAAGb,QAAQ,CAACI,IAAI,CAACC,KAAK,GAAG,CAAC;MAC/C;IACJ;EAAC;IAAAR,GAAA;IAAAC,KAAA,EACD,SAAAgB,UAAUd,QAAQ,EAAE;MAChB,OAAO,CAACA,QAAQ,CAACe,SAAS;IAC9B;EAAC;IAAAlB,GAAA;IAAAC,KAAA,EACD,SAAAkB,YAAYd,OAAO,EAAc;MAC7B,IAAI,CAACA,OAAO,CAACE,IAAI,EAAE;QACfF,OAAO,CAACE,IAAI,GAAG,IAAIZ,IAAI,EAAE;MAC7B;MAAC,SAAAyB,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAHmBC,OAAO,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAPF,OAAO,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;MAAA;MAI3B,SAAAC,EAAA,MAAAC,QAAA,GAAqBJ,OAAO,EAAAG,EAAA,GAAAC,QAAA,CAAAL,MAAA,EAAAI,EAAA,IAAE;QAAzB,IAAME,MAAM,GAAAD,QAAA,CAAAD,EAAA;QACbrB,OAAO,CAACE,IAAI,CAACsB,IAAI,CAACD,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACrB,IAAI,CAAC;MAClF;IACJ;EAAC;IAAAP,GAAA;IAAAC,KAAA,EACD,SAAA6B,OAAO3B,QAAQ,EAAE4B,KAAK,EAAE;MACpB,IAAI,CAAC,IAAI,CAACd,SAAS,CAACd,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACI,IAAI,EAAE;QAC7C;MACJ;MACA,IAAMA,IAAI,GAAGJ,QAAQ,CAACI,IAAI;MAC1B,IAAIyB,WAAW,GAAG,KAAK;MACvB,IAAI7B,QAAQ,CAACa,QAAQ,EAAE;QACnBT,IAAI,CAACK,SAAS,IAAImB,KAAK,CAAC9B,KAAK;QAC7B,IAAIM,IAAI,CAACK,SAAS,IAAIT,QAAQ,CAACI,IAAI,CAACC,KAAK,EAAE;UACvCwB,WAAW,GAAG,IAAI;UAClB7B,QAAQ,CAACa,QAAQ,GAAG,KAAK;UACzBT,IAAI,CAACK,SAAS,GAAG,CAAC;UAClBL,IAAI,CAACO,IAAI,GAAG,CAAC;QACjB,CAAC,MACI;UACD;QACJ;MACJ;MACA,IAAIP,IAAI,CAACM,QAAQ,KAAK,CAAC,CAAC,EAAE;QACtB;MACJ;MACA,IAAIV,QAAQ,CAACa,QAAQ,EAAE;QACnB;MACJ;MACA,IAAIgB,WAAW,EAAE;QACbzB,IAAI,CAACO,IAAI,GAAG,CAAC;MACjB,CAAC,MACI;QACDP,IAAI,CAACO,IAAI,IAAIiB,KAAK,CAAC9B,KAAK;MAC5B;MACA,IAAIM,IAAI,CAACO,IAAI,GAAGP,IAAI,CAACM,QAAQ,EAAE;QAC3B;MACJ;MACAN,IAAI,CAACO,IAAI,GAAG,CAAC;MACb,IAAIX,QAAQ,CAACI,IAAI,CAACQ,KAAK,GAAG,CAAC,EAAE;QACzBZ,QAAQ,CAACI,IAAI,CAACQ,KAAK,EAAE;MACzB;MACA,IAAIZ,QAAQ,CAACI,IAAI,CAACQ,KAAK,KAAK,CAAC,EAAE;QAC3BZ,QAAQ,CAAC8B,OAAO,EAAE;QAClB;MACJ;MACA,IAAMC,UAAU,GAAG,IAAI,CAACrC,SAAS,CAACsC,MAAM,CAACC,IAAI;QAAEC,UAAU,GAAG3C,aAAa,CAAC,CAAC,EAAEwC,UAAU,CAACI,KAAK,CAAC;QAAEC,WAAW,GAAG7C,aAAa,CAAC,CAAC,EAAEwC,UAAU,CAACI,KAAK,CAAC;MAChJnC,QAAQ,CAACqC,QAAQ,CAACC,CAAC,GAAGhD,aAAa,CAAC4C,UAAU,CAAC;MAC/ClC,QAAQ,CAACqC,QAAQ,CAACE,CAAC,GAAGjD,aAAa,CAAC8C,WAAW,CAAC;MAChDpC,QAAQ,CAACa,QAAQ,GAAG,IAAI;MACxBT,IAAI,CAACK,SAAS,GAAG,CAAC;MAClBL,IAAI,CAACO,IAAI,GAAG,CAAC;MACbX,QAAQ,CAACwC,KAAK,EAAE;MAChB,IAAMrC,WAAW,GAAGH,QAAQ,CAACE,OAAO,CAACE,IAAI;MACzC,IAAID,WAAW,EAAE;QACbC,IAAI,CAACC,KAAK,GAAGhB,aAAa,CAACc,WAAW,CAACE,KAAK,CAACP,KAAK,CAAC,GAAG,IAAI;QAC1DM,IAAI,CAACM,QAAQ,GAAGrB,aAAa,CAACc,WAAW,CAACO,QAAQ,CAACZ,KAAK,CAAC,GAAG,IAAI;MACpE;IACJ;EAAC;EAAA,OAAAL,WAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}