{"ast":null,"code":"import _slicedToArray from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nvar fixOutMode = function fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\nexport var Particle = /*#__PURE__*/function () {\n  function Particle(engine, id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n    this.container = container;\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n  _createClass(Particle, [{\n    key: \"destroy\",\n    value: function destroy(override) {\n      var _a;\n      if (this.unbreakable || this.destroyed) {\n        return;\n      }\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      this.slow.inRange = false;\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.container.particles.updaters),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var updater = _step2.value;\n          if (updater.particleDestroyed) {\n            updater.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      var _iterator3 = _createForOfIteratorHelper(container.plugins),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n            plugin = _step3$value[1];\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a;\n      return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color));\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var _a;\n      return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a;\n      return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor));\n    }\n  }, {\n    key: \"init\",\n    value: function init(id, position, overrideOptions, group) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      var container = this.container,\n        engine = this._engine;\n      this.id = id;\n      this.group = group;\n      this.fill = true;\n      this.pathRotation = false;\n      this.close = true;\n      this.lastPathTime = 0;\n      this.destroyed = false;\n      this.unbreakable = false;\n      this.rotation = 0;\n      this.misplaced = false;\n      this.retina = {\n        maxDistance: {}\n      };\n      this.outType = \"normal\";\n      this.ignoresResizeRatio = true;\n      var pxRatio = container.retina.pixelRatio,\n        mainOptions = container.actualOptions,\n        particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n        shapeType = particlesOptions.shape.type,\n        reduceDuplicates = particlesOptions.reduceDuplicates;\n      this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n      var shapeOptions = particlesOptions.shape;\n      if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type,\n          shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n      this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n      particlesOptions.load(overrideOptions);\n      particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n      this.interactivity = new Interactivity(engine, container);\n      this.interactivity.load(container.actualOptions.interactivity);\n      this.interactivity.load(particlesOptions.interactivity);\n      this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n      this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n      this.options = particlesOptions;\n      var pathOptions = this.options.move.path;\n      this.pathDelay = getValue(pathOptions.delay) * 1000;\n      if (pathOptions.generator) {\n        this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n        if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n          this.pathGenerator.init(container);\n        }\n      }\n      var zIndexValue = getRangeValue(this.options.zIndex.value);\n      container.retina.initParticle(this);\n      var sizeOptions = this.options.size,\n        sizeRange = sizeOptions.value,\n        sizeAnimation = sizeOptions.animation;\n      this.size = {\n        enable: sizeOptions.animation.enable,\n        value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n        max: getRangeMax(sizeRange) * pxRatio,\n        min: getRangeMin(sizeRange) * pxRatio,\n        loops: 0,\n        maxLoops: getRangeValue(sizeOptions.animation.count)\n      };\n      if (sizeAnimation.enable) {\n        this.size.status = \"increasing\";\n        this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n        switch (sizeAnimation.startValue) {\n          case \"min\":\n            this.size.value = this.size.min;\n            this.size.status = \"increasing\";\n            break;\n          case \"random\":\n            this.size.value = randomInRange(this.size);\n            this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n            break;\n          case \"max\":\n          default:\n            this.size.value = this.size.max;\n            this.size.status = \"decreasing\";\n            break;\n        }\n      }\n      this.size.initialValue = this.size.value;\n      this.bubble = {\n        inRange: false\n      };\n      this.slow = {\n        inRange: false,\n        factor: 1\n      };\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n      this.initialPosition = this.position.copy();\n      var canvasSize = container.canvas.size,\n        moveCenter = Object.assign({}, this.options.move.center),\n        isCenterPercent = moveCenter.mode === \"percent\";\n      this.moveCenter = {\n        x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n        y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n        radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n        mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\"\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n      switch (this.options.move.direction) {\n        case \"inside\":\n          this.outType = \"inside\";\n          break;\n        case \"outside\":\n          this.outType = \"outside\";\n          break;\n      }\n      this.initialVelocity = this._calculateVelocity();\n      this.velocity = this.initialVelocity.copy();\n      this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n      this.offset = Vector.origin;\n      var particles = container.particles;\n      particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n      particles.lastZIndex = this.position.z;\n      this.zIndexFactor = this.position.z / container.zLayers;\n      this.sides = 24;\n      var drawer = container.drawers.get(this.shape);\n      if (!drawer) {\n        drawer = this._engine.plugins.getShapeDrawer(this.shape);\n        if (drawer) {\n          container.drawers.set(this.shape, drawer);\n        }\n      }\n      if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n        drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n      }\n      var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n      if (sideCountFunc) {\n        this.sides = sideCountFunc(this);\n      }\n      this.spawning = false;\n      this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n      var _iterator4 = _createForOfIteratorHelper(container.particles.updaters),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var updater = _step4.value;\n          updater.init(this);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(container.particles.movers),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var mover = _step5.value;\n          (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n        drawer.particleInit(container, this);\n      }\n      var _iterator6 = _createForOfIteratorHelper(container.plugins),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n            plugin = _step6$value[1];\n          (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"isInsideCanvas\",\n    value: function isInsideCanvas() {\n      var radius = this.getRadius(),\n        canvasSize = this.container.canvas.size;\n      return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _a;\n      var _iterator7 = _createForOfIteratorHelper(this.container.particles.updaters),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var updater = _step7.value;\n          (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"_calcPosition\",\n    value: function _calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var _a, _b, _c, _d;\n      var _iterator8 = _createForOfIteratorHelper(container.plugins),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _step8$value = _slicedToArray(_step8.value, 2),\n            plugin = _step8$value[1];\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n          if (pluginPos !== undefined) {\n            return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      var canvasSize = container.canvas.size,\n        exactPosition = calcExactPositionOrRandomFromSize({\n          size: canvasSize,\n          position: position\n        }),\n        pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n        radius = this.getRadius(),\n        outModes = this.options.move.outModes,\n        fixHorizontal = function fixHorizontal(outMode) {\n          fixOutMode({\n            outMode: outMode,\n            checkModes: [\"bounce\", \"bounce-horizontal\"],\n            coord: pos.x,\n            maxCoord: container.canvas.size.width,\n            setCb: function setCb(value) {\n              return pos.x += value;\n            },\n            radius: radius\n          });\n        },\n        fixVertical = function fixVertical(outMode) {\n          fixOutMode({\n            outMode: outMode,\n            checkModes: [\"bounce\", \"bounce-vertical\"],\n            coord: pos.y,\n            maxCoord: container.canvas.size.height,\n            setCb: function setCb(value) {\n              return pos.y += value;\n            },\n            radius: radius\n          });\n        };\n      fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n      fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n      fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n      fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n      if (this._checkOverlap(pos, tryCount)) {\n        return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n      return pos;\n    }\n  }, {\n    key: \"_calculateVelocity\",\n    value: function _calculateVelocity() {\n      var baseVelocity = getParticleBaseVelocity(this.direction),\n        res = baseVelocity.copy(),\n        moveOptions = this.options.move;\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n      var rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n        radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n        range = {\n          left: radOffset - rad / 2,\n          right: radOffset + rad / 2\n        };\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n      return res;\n    }\n  }, {\n    key: \"_checkOverlap\",\n    value: function _checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var collisionsOptions = this.options.collisions,\n        radius = this.getRadius();\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n      var overlapOptions = collisionsOptions.overlap;\n      if (overlapOptions.enable) {\n        return false;\n      }\n      var retries = overlapOptions.retries;\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n      var overlaps = false;\n      var _iterator9 = _createForOfIteratorHelper(this.container.particles.array),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var particle = _step9.value;\n          if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n            overlaps = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return overlaps;\n    }\n  }, {\n    key: \"_getRollColor\",\n    value: function _getRollColor(color) {\n      var _a;\n      if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n        return color;\n      }\n      var backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n        backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n        rolled = Math.floor((((_a = this.roll.angle) !== null && _a !== void 0 ? _a : 0) + backSum) / (Math.PI / backFactor)) % 2;\n      if (!rolled) {\n        return color;\n      }\n      if (this.backColor) {\n        return this.backColor;\n      }\n      if (this.roll.alter) {\n        return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n      }\n      return color;\n    }\n  }, {\n    key: \"_loadShapeData\",\n    value: function _loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n      if (shapeData) {\n        return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n      }\n    }\n  }]);\n  return Particle;\n}();","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","loadParticlesOptions","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","engine","id","container","position","overrideOptions","group","_classCallCheck","_engine","init","_createClass","key","value","destroy","override","_a","unbreakable","destroyed","bubble","inRange","slow","_iterator","_createForOfIteratorHelper","plugins","_step","s","n","done","_step$value","_slicedToArray","plugin","particleDestroyed","err","e","f","_iterator2","particles","updaters","_step2","updater","pathGenerator","reset","draw","delta","_iterator3","_step3","_step3$value","canvas","drawParticlePlugin","drawParticle","getFillColor","_getRollColor","color","getMass","Math","pow","getRadius","PI","getPosition","x","offset","y","z","size","getStrokeColor","strokeColor","_b","_c","_d","_e","_f","_g","_h","_j","fill","pathRotation","close","lastPathTime","rotation","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","shape","type","reduceDuplicates","shapeOptions","overrideShapeType","load","shapeData","_loadShapeData","interactivity","options","pathOptions","move","path","pathDelay","delay","generator","getPathGenerator","addPath","zIndexValue","zIndex","initParticle","sizeOptions","sizeRange","sizeAnimation","animation","enable","max","min","loops","maxLoops","count","status","decay","startValue","initialValue","factor","_calcPosition","zLayers","initialPosition","copy","canvasSize","moveCenter","Object","assign","center","isCenterPercent","mode","width","height","direction","initialVelocity","_calculateVelocity","velocity","moveDecay","origin","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","_iterator4","_step4","_iterator5","movers","_step5","mover","call","particleInit","_iterator6","_step6","_step6$value","particleCreated","isInsideCanvas","isVisible","_iterator7","_step7","tryCount","arguments","length","undefined","_iterator8","_step8","_step8$value","pluginPos","particlePosition","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","_checkOverlap","baseVelocity","res","moveOptions","rad","angle","radOffset","range","straight","random","speed","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","_iterator9","array","_step9","particle","roll","backColor","alter","backFactor","horizontal","vertical","backSum","rolled","floor"],"sources":["C:/Users/Polymorph/Desktop/face_recognizer/face_recognition_app/SmartBrains/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        var _a;\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of this.container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n        (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _a;\n        return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getStrokeColor() {\n        var _a;\n        return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n        this.interactivity = new Interactivity(engine, container);\n        this.interactivity.load(container.actualOptions.interactivity);\n        this.interactivity.load(particlesOptions.interactivity);\n        this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n        this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value, sizeAnimation = sizeOptions.animation;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        if (sizeAnimation.enable) {\n            this.size.status = \"increasing\";\n            this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = \"increasing\";\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size);\n                    this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = \"decreasing\";\n                    break;\n            }\n        }\n        this.size.initialValue = this.size.value;\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenter = Object.assign({}, this.options.move.center), isCenterPercent = moveCenter.mode === \"percent\";\n        this.moveCenter = {\n            x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n            y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n            radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n            mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\",\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        var _a;\n        for (const updater of this.container.particles.updaters) {\n            (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n    }\n    _calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this._checkOverlap(pos, tryCount)) {\n            return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    _calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= getRandom();\n        }\n        return res;\n    }\n    _checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    _getRollColor(color) {\n        var _a;\n        if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n            return color;\n        }\n        const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor((((_a = this.roll.angle) !== null && _a !== void 0 ? _a : 0) + backSum) / (Math.PI / backFactor)) % 2;\n        if (!rolled) {\n            return color;\n        }\n        if (this.backColor) {\n            return this.backColor;\n        }\n        if (this.roll.alter) {\n            return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n        return color;\n    }\n    _loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}